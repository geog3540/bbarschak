"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[559],{10559:function(e,t,n){n.r(t),n.d(t,{default:function(){return y},guides:function(){return f}});var s=n(85893),i=n(94184),r=n.n(i),o=n(67294),a=n(21918),l=n(37497),c=n(54239),h=n(17905),d=n(15706),u=n(99414),p=n(3338),x=n(47311),m=n(12447);var j=n(19671),g=n(4242);const b="https://static.observablehq.com",f=[{type:"first-steps",title:"Learn how to write and run JavaScript on Observable",image:"".concat(b,"/assets/guides/javascript.svg"),tags:["javascript","beginner"],steps:[{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Welcome to Observable! To take your first step, replace the comment in the cell on the left with a simple calculation:"}),(0,s.jsx)(a.SU,{children:"1 + 2"}),(0,s.jsxs)("p",{children:["When you\u2019re done, click ",(0,s.jsx)(a.JO,{icon:p.Z,text:"Run cell"})," or hit ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"})," to run the cell. You should then see the number 3 appear above the code."]}),(0,s.jsx)("p",{children:"This is the result of the calculation. On Observable, it appears above the code."})]}),start:74,end:75},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Now let\u2019s give your cell a name. Naming a cell lets you refer to its value from other cells."}),(0,s.jsxs)("p",{children:["Type an ",(0,s.jsx)("code",{children:"x"})," followed by an equals sign ",(0,s.jsx)("code",{children:"="})," ","into your cell, like so:"]}),(0,s.jsx)(a.SU,{children:"x = 1 + 2"}),(0,s.jsxs)("p",{children:["Press ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"})," again or click the"," ",(0,s.jsx)(a.JO,{icon:p.Z,text:"Run cell"})," button. Note that you can now see the name of the cell, ",(0,s.jsx)("code",{children:"x"}),", in addition to its value."]})]}),start:77,end:78},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Now let\u2019s create an input to add some interaction."}),(0,s.jsxs)("p",{children:["Click the ",(0,s.jsx)(a.JO,{icon:x.ZP})," button under the existing cell on the left and type \u201crange\u201d into the menu, then click the"," ",(0,s.jsx)("b",{children:"Range"})," slider code snippet."]}),(0,s.jsx)("video",{autoPlay:!0,muted:!0,loop:!0,playsInline:!0,className:"w-100 br1 shadow-1",style:{marginBottom:-4},children:(0,s.jsx)("source",{src:"".concat("https://static.observablehq.com","/assets/guides/insert-range.mp4"),type:"video/mp4"})}),(0,s.jsxs)("p",{children:["This will insert a new cell into your notebook containing a piece of code to show a"," ",(0,s.jsx)(a.rU,{href:"/@observablehq/input-range",children:"range input"}),". It allows you to change the value of a variable."]}),(0,s.jsxs)("p",{children:["Rename the ",(0,s.jsx)("code",{children:"range"})," variable after the"," ",(0,s.jsx)("code",{children:"viewof"})," keyword to ",(0,s.jsx)("code",{children:"y"}),", so your code looks like this:"]}),(0,s.jsx)(a.SU,{children:'viewof y = Inputs.range([0, 100],\n            {label: "Amount", step: 1})'}),(0,s.jsxs)("p",{children:["Run your code by pressing ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"})," or clicking the ",(0,s.jsx)(a.JO,{icon:p.Z,text:"Run cell"})," button."]})]}),start:80,end:82},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["You can refer to variables like ",(0,s.jsx)("code",{children:"x"})," and ",(0,s.jsx)("code",{children:"y"})," ","in your own code. Add another JavaScript cell by clicking the"," ",(0,s.jsx)(a.JO,{icon:x.ZP})," button and selecting ",(0,s.jsx)("b",{children:"JavaScript"})," or pressing ",(0,s.jsx)(a.R8,{words:!0,children:"Enter"}),"."]}),(0,s.jsxs)("p",{children:["Then add a simple calculation and run the cell by pressing"," ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"})," or clicking"," ",(0,s.jsx)(a.JO,{icon:p.Z,text:"Run cell"}),":"]}),(0,s.jsx)(a.SU,{children:"x + y"}),(0,s.jsxs)("p",{children:["When you drag the slider, any cell referencing ",(0,s.jsx)("code",{children:"y"})," will re-run automatically and you'll see the result of the calculation update."]})]}),start:84,end:86},{content:e=>{let{dispatch:t,currentUser:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Well done, you\u2019ve taken your first steps on Observable! To keep a copy of this notebook in your own collection, click the button below."}),(0,s.jsx)(l.KM,{icon:u.Z,title:"Save to your notebooks","aria-label":"Save to your notebooks",text:"Save to your notebooks",onClick:()=>{t({type:"forkRequested",source:"guide",trigger:"click"})}}),(0,s.jsxs)("p",{children:["Next,"," ",(0,s.jsx)(a.rU,{href:"/guide/tip-calculator",children:"dive deeper into JavaScript by writing a tip calculator"}),", or check out these guides and other resources:"]}),(0,s.jsxs)("ul",{className:"pl3",children:[(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/functional-basics",children:"Explore a dataset to learn about functional programming"})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/murder-mystery",children:"Follow clues in a database to solve a murder mystery"})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/athletes",children:"Explore data about Olympic athletes by creating charts"})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/electricity",children:"Analyze the relationship between temperature and electricity use in two citites"})}),(0,s.jsx)("li",{children:(0,s.jsxs)(a.rU,{href:"/@observablehq/getting-started",children:["Check out our ",(0,s.jsx)("em",{children:"Getting Started"})," notebook"]})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:n?"/@".concat(n.login):"/",children:"Go back to your home page"})})]})]})},start:88,end:90}]},{type:"tip-calculator",title:"Write a tip calculator to dive deeper into JavaScript",image:"".concat(b,"/assets/guides/calculator.svg"),tags:["javascript","beginner"],steps:[{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["In this guide, you will create a simple tip calculator and learn about embedding values into text. It builds on the"," ",(0,s.jsx)(a.rU,{href:"/guide/first-steps",children:"First Steps on Observable"})," ","guide."]}),(0,s.jsxs)("p",{children:["First, let's create a range input for the bill amount. Click a"," ",(0,s.jsx)(a.JO,{icon:x.ZP})," button near the left edge of an existing cell to open the Add Cell menu. Then, find the ",(0,s.jsx)("strong",{children:"Range"})," ","input by either typing the first few letters of the input (which opens the search bar), or by scrolling through the list."]}),(0,s.jsxs)("p",{children:["Clicking the Range input option will create a new cell containing some starter code. Change the name of the variable from range to amount and adjust the range of values to read"," ",(0,s.jsx)("code",{children:"[0, 200]"})," so we can pick a bill amount between $0 and $200. It should look like this:"]}),(0,s.jsx)(a.SU,{children:'viewof amount = Inputs.range([0, 200],\n          {label: "Amount", step: 1})'})]}),start:6,end:8},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Next, we'll create a set of radio buttons to pick the tip percentage. We could use a range slider here as well of course, but we want to use a different input here for some variety (and you usually have to pick from a fixed list of percentages)."}),(0,s.jsxs)("p",{children:["Find the Radio input by scrolling through the list that appears when you click a ",(0,s.jsx)(a.JO,{icon:x.ZP})," button, or by typing into that list to narrow down the options. You can insert the radio button code into your notebook by pressing return or clicking the item in the list."]}),(0,s.jsxs)("p",{children:["Now change the name of the variable from radios to tipPercent and replace the list of options with one that includes a number of different percentages, such as"," ",(0,s.jsx)("code",{children:"[10, 12, 15, 18, 20, 25]"})," (note that these are numbers, not strings, so they are not surrounded by quotes). Then change the label to ",(0,s.jsx)("code",{children:'"Tip Percentage"'})," and the default value to ",(0,s.jsx)("code",{children:"20"}),"."]}),(0,s.jsx)("p",{children:"It will look like this:"}),(0,s.jsx)(a.SU,{children:'viewof tipPercent = Inputs.radio(\n            [10, 12, 15, 18, 20, 25],\n            {label: "Tip Percentage",\n              value: 20})'})]}),start:10,end:12},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Now that we know the amount and tip percentage, we can calculate the tip amount! Create a new JavaScript cell by clicking a"," ",(0,s.jsx)(a.JO,{icon:x.ZP}),"button on the left, then enter this calculation:"]}),(0,s.jsx)(a.SU,{children:"tip = amount * (tipPercent / 100)"}),(0,s.jsxs)("p",{children:["Press ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"})," or click the"," ",(0,s.jsx)(a.JO,{icon:p.Z})," button on the right edge of the cell to run it. When you change the amount or tip percentage above, Observable will re-run your calculation and the tip amount will change as well!"]})]}),start:15,end:17},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["We can turn this into a sentence by embedding the values into Markdown or HTML cells. To show the value of a variable named amount, type ",(0,s.jsx)("code",{children:"${amount}"}),"."]}),(0,s.jsxs)("p",{children:["Create a new Markdown cell by clicking a ",(0,s.jsx)(a.JO,{icon:x.ZP})," ","button and selecting ",(0,s.jsx)("strong",{children:"Markdown"}),". Then enter this line:"]}),(0,s.jsx)(a.SU,{children:"A ${tipPercent}% tip on ${amount}\n        is ${tip}"}),(0,s.jsx)("p",{children:"To display $ signs in front of the numbers, we just add a second set of dollar signs to the embeddings that contain currency values."}),(0,s.jsx)(a.SU,{children:"A ${tipPercent}% tip on $${amount}\n        is $${tip}"}),(0,s.jsxs)("p",{children:["This might look confusing at first, but the first $ sign will show as itself, the second one immediately in front of the"," ",(0,s.jsx)("code",{children:"{}"})," inserts the value computed inside the curly braces."]})]}),start:19,end:23},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["For monetary amounts, we typically expect to see numbers to be shown as dollars and cents (or similar in other currencies). Depending on the values you choose for the tip percentage and amount, you might see simple whole numbers like ",(0,s.jsx)("code",{children:"$125"})," ","or too many decimals like ",(0,s.jsx)("code",{children:"$12.959999999999999"}),"."]}),(0,s.jsxs)("p",{children:["We can use calculations and functions inside embedded code, just like in regular JavaScript. The ",(0,s.jsx)("code",{children:".toFixed()"})," function applied to a number returns a value with a given number of decimals, for example ",(0,s.jsx)("code",{children:"amount.toFixed(2)"})," will return the amount with two decimals."]}),(0,s.jsxs)("p",{children:["Change your existing sentence by appending"," ",(0,s.jsx)("code",{children:".toFixed(2)"})," to the amount and tip variables. It should look like this:"]}),(0,s.jsx)(a.SU,{children:"A ${tipPercent}% tip on\n                $${amount.toFixed(2)}\n                is $${tip.toFixed(2)}"}),(0,s.jsx)("p",{children:"Now you will see all monetary amounts properly displayed the way you'd expect!"})]}),start:27,end:28},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"We can also perform calculations within an embedded code block, for example to calculate the total of the amount plus the tip."}),(0,s.jsx)("p",{children:"Add the following to your existing sentence:"}),(0,s.jsx)(a.SU,{children:", for a total of\n          $${(amount+tip).toFixed(2)}"}),(0,s.jsxs)("p",{children:["What is happening here? Inside the parentheses, we're simply calculating the total, ",(0,s.jsx)("code",{children:"amount+tip"}),". We want to also round this number to two decimals, so we want to run the"," ",(0,s.jsx)("code",{children:".toFixed()"})," function. We can attach it to any number, including the result of our calculation. So"," ",(0,s.jsx)("code",{children:"(amount+tip).toFixed(2)"})," adds the two numbers and then applies the function to the result. Then we just wrap everything inside of the usual ",(0,s.jsx)("code",{children:"${}"})," syntax for embedding, and place an extra $ sign in front to display in the sentence. And voil\xe0!"]})]}),start:30,end:31},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["As a final step, let's add some formatting to make this sentence easier to read. We can use the usual Markdown syntax here, with a single underscore ",(0,s.jsx)("code",{children:"_"})," or asterisk ",(0,s.jsx)("code",{children:"*"})," for"," ",(0,s.jsx)("em",{children:"italics"})," and two of either for ",(0,s.jsx)("strong",{children:"bold"}),"."]}),(0,s.jsx)("p",{children:"Place pairs of asterisks around each embedded number to make it stand out. The result should look like this:"}),(0,s.jsx)(a.SU,{children:"A **${tipPercent}%** tip on\n  **$${amount.toFixed(2)}** is\n  **$${tip.toFixed(2)}**, for a total\n  of **$${(amount+tip).toFixed(2)}**"}),(0,s.jsxs)("p",{children:["There are two ways to do this: you can of course enter the asterisks directly into the input field. But the easier way is to select the text you want to turn bold and press"," ",(0,s.jsx)(a.R8,{words:!0,children:"Cmd-B"}),". This will insert the asterisks for you (this also works for italics, ",(0,s.jsx)(a.R8,{words:!0,children:"Cmd-I"}),")."]})]}),start:33,end:34},{content:e=>{let{dispatch:t,currentUser:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"This marks the end of this quick guide. We learned how to use inputs in calculations, and how to display numbers inside of text for easier readability."}),(0,s.jsx)(l.KM,{icon:u.Z,title:"Save to your notebooks","aria-label":"Save to your notebooks",text:"Save to your notebooks",onClick:()=>{t({type:"forkRequested",source:"guide",trigger:"click"})}}),(0,s.jsxs)("p",{children:["Next,"," ",(0,s.jsx)(a.rU,{href:"/guide/functional-basics",children:"learn about functional programming basics by exploring a dataset"}),"! Or pick from these options:"]}),(0,s.jsxs)("ul",{className:"pl3",children:[(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/murder-mystery",children:"Follow clues in a database to solve a murder mystery"})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/athletes",children:"Explore data about Olympic athletes using bar charts and histograms"})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/electricity",children:"Analyze the relationship between temperature and electricity use in two citites"})}),(0,s.jsx)("li",{children:(0,s.jsxs)(a.rU,{href:"/@observablehq/getting-started",children:["Check out our ",(0,s.jsx)("em",{children:"Getting Started"})," notebook"]})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:n?"/@".concat(n.login):"/",children:"Go back to your home page"})})]})]})},start:36,end:38}]},{type:"functional-basics",title:"Explore a dataset using functional programming",image:"".concat(b,"/assets/guides/dataset.svg"),tags:["javascript","beginner"],steps:[{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["This guide will walk you through calling functions to calculate values and creating simple accessor functions to extract the fields you want from objects. It is based on the"," ",(0,s.jsx)(a.rU,{href:"/guide/first-steps",children:"first steps"})," and"," ",(0,s.jsx)(a.rU,{href:"/guide/tip-calculator",children:"tip calculator"})," guides."]}),(0,s.jsx)("p",{children:"In this notebook, we have created a table of Olympic athletes with demographic data and some physical attributes for each."}),(0,s.jsxs)("p",{children:["We're assigning ",(0,s.jsx)("code",{children:"olympians"})," to another variable called"," ",(0,s.jsx)("code",{children:"athletes"})," here just so we can show it in the table view. It won't let us pick a variable built into the standard library like olympians. We'll just use ",(0,s.jsx)("code",{children:"olympians"})," in this notebook though, as you would if you didn't need the table view."]})]}),start:8,end:10},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Instead of the table view, we can also look at it as an array of objects, one for each row in the table. An array is like a list, with a fixed order in which the items appear. Lists can be sorted, this one is sorted by the athlete's name."}),(0,s.jsxs)("p",{children:["Click the triangle next to the word ",(0,s.jsx)("strong",{children:"Array"})," to open up the array, then click one of the triangles next to the word"," ",(0,s.jsx)("strong",{children:"Object"})," to see the fields inside the object."]})]}),start:11,end:12},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"We can access individual athletes in our array by index, which is their position in the list. Array indices start at 0, so if we're looking for the 100th athlete, we need index 99. Create a new JavaScript cell and enter the following to find out who that is:"}),(0,s.jsx)(a.SU,{children:"olympians[99]"})]}),start:14,end:16},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"We want to look for the tallest and shortest persons in our dataset, so we'll have to use a function that retrieves the height of an athlete from an object. This is called an accessor function."}),(0,s.jsx)("p",{children:"Create a new JavaScript cell and enter the following code:"}),(0,s.jsx)(a.SU,{children:"function height(athlete) {\n  return athlete.height;\n}"}),(0,s.jsxs)("p",{children:["What does this do? It declares a new function called height, which takes a single argument called ",(0,s.jsx)("code",{children:"athlete"}),". We're assuming that this is an object like the ones in our list of athletes, and we return the height field from it."]}),(0,s.jsx)("p",{children:"You can run this function on the athlete we just looked at by editing your existing JavaScript cell to read:"}),(0,s.jsx)(a.SU,{children:"height(olympians[99])"}),(0,s.jsx)("p",{children:"This returns that athlete's height in meters."})]}),start:18,end:22},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"We can now use our height function inside of another function to get the maximum height. Enter the following in a new JavaScript cell:"}),(0,s.jsx)(a.SU,{children:"maxHeight = d3.max(olympians, height)"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("code",{children:"d3.max()"})," function expects an array and an accessor function. It goes through the array, uses the accessor on each object to retrieve the value we're interested in, and returns the largest number it finds."]}),(0,s.jsxs)("p",{children:["In our case, we're passing in the ",(0,s.jsx)("code",{children:"olympians"})," array and our ",(0,s.jsx)("code",{children:"height"})," function as the accessor. We'll store the maximum height value in the ",(0,s.jsx)("code",{children:"maxHeight"})," variable."]}),(0,s.jsxs)("p",{children:["We can do the same thing with ",(0,s.jsx)("code",{children:"d3.min()"})," to get the shortest person:"]}),(0,s.jsx)(a.SU,{children:"minHeight = d3.min(olympians, height)"})]}),start:24,end:28},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["But who is that? We can find out by using a different function,",(0,s.jsx)("code",{children:"d3.maxIndex()"}),", which returns the index inside the array where the largest value was found, rather than the value."]}),(0,s.jsx)(a.SU,{children:"tallIndex = d3.maxIndex(olympians,\n                            height)"}),(0,s.jsxs)("p",{children:["We can now also look up other information about this person by accessing their object in the array. To retrieve a value from an array, we again use square brackets around the index of the value we're interested in, so in this case"," ",(0,s.jsx)("code",{children:"olympians[tallIndex]"}),"to get the tallest athlete. To access their name, we can then add"," ",(0,s.jsx)("code",{children:".name"})," to our code:"]}),(0,s.jsx)(a.SU,{children:"olympians[tallIndex].name"})]}),start:30,end:34},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Accessor functions are very common in JavaScript because they allow us to create generic functions like ",(0,s.jsx)("code",{children:"d3.min()"}),","," ",(0,s.jsx)("code",{children:"d3.max()"}),", etc., that work in a wide variety of situations. It can be tedious to create new functions every time you need an accessor, so JavaScript has an easy way to create inline functions that is particularly well suited for accessors."]}),(0,s.jsxs)("p",{children:["Recall that our height() function accessed the value of the athlete parameter using the notation ",(0,s.jsx)("code",{children:"athlete.height"}),". We can write a similar function that accesses the weight of an athlete (in kilograms) by using an ",(0,s.jsx)("em",{children:"arrow function"})," that looks like the following. Create a new JavaScript cell and enter this code:"]}),(0,s.jsx)(a.SU,{children:"maxWeight = d3.max(olympians,\n                        d => d.weight)"}),(0,s.jsxs)("p",{children:["The expression ",(0,s.jsx)("code",{children:"d => d.weight"})," works exactly the same as our height() function, besides accessing the weight of course, but as an ",(0,s.jsx)("em",{children:"anonymous function"})," (because it doesn't have a name). Arrow functions can be used for many different purposes, but for accessors they have a fairly simple mnemonic:"," ",(0,s.jsx)("code",{children:"d => d.weight"})," can be read as"," ",(0,s.jsx)("em",{children:"take d and return its weight."})]})]}),start:36,end:38},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Arrow functions are often used to compute simple functions in addition to accessing fields. We can find the most highly decorated athlete by adding up their gold, silver, and bronze medals in our accessor and returning that total to use by the"," ",(0,s.jsx)("code",{children:"d3.max()"})," function:"]}),(0,s.jsx)(a.SU,{children:"maxMedals = d3.max(olympians,\n    d => d.gold + d.silver + d.bronze)"}),(0,s.jsx)("p",{children:"Similarly, we might convert units in such a function, or perform other computations."})]}),start:40,end:42},{content:e=>{let{dispatch:t,currentUser:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"In this guide, we covered some basics of functional programming to find particular values in arrays, use accessor functions, and write anonymous functions using the arrow notation."}),(0,s.jsx)(l.KM,{icon:u.Z,title:"Save to your notebooks","aria-label":"Save to your notebooks",text:"Save to your notebooks",onClick:()=>{t({type:"forkRequested",source:"guide",trigger:"click"})}}),(0,s.jsxs)("p",{children:["Next,"," ",(0,s.jsx)(a.rU,{href:"/guide/murder-mystery",children:"Follow clues in a database to solve a murder mystery"}),"! Or pick from these other options:"]}),(0,s.jsxs)("ul",{className:"pl3",children:[(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/athletes",children:"Explore data about Olympic athletes using bar charts and histograms"})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/electricity",children:"Analyze the relationship between temperature and electricity use in two citites"})}),(0,s.jsx)("li",{children:(0,s.jsxs)(a.rU,{href:"/@observablehq/getting-started",children:["Check out our ",(0,s.jsx)("em",{children:"Getting Started"})," notebook"]})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:n?"/@".concat(n.login):"/",children:"Go back to your home page"})})]})]})},start:44,end:46}]},{type:"murder-mystery",title:"Follow clues in a database to solve a murder mystery",image:"".concat(b,"/assets/guides/mystery.svg"),tags:["javascript","beginner"],steps:[{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["In this guide, we'll use data table and SQL cells to explore the database used to solve the"," ",(0,s.jsx)(a.rU,{href:"https://observablehq.com/@observablehq/sql-mystery-game-data-table-tutorial",children:"SQL murder mystery"}),". No worries, we won't spoil the ending here, but perhaps you can solve it after you're done with this guide."]}),(0,s.jsx)("p",{children:"We have imported the database as a DuckDB database into this notebook. DuckDB is a very powerful database that runs inside your browser. We can use it just like any external database you might connect to, such as MySQL, Snowflake, etc."}),(0,s.jsxs)("p",{children:["The mystery begins by explaining that all the information is contained in a database, and that we're looking for the clues on a"," ",(0,s.jsx)("em",{children:"murder"})," that occurred sometime on"," ",(0,s.jsx)("em",{children:"January 15, 2018"})," in ",(0,s.jsx)("em",{children:"SQL City"}),"."]}),(0,s.jsxs)("p",{children:["We'll create a data table view of the crime_scene_report table and look for murders occurring on that date in that city. We can filter the date to ",(0,s.jsx)("code",{children:"2018-01-15"})," (dates in this database are strings), the city to ",(0,s.jsx)("code",{children:"SQL City"}),", and the type to"," ",(0,s.jsx)("code",{children:"murder"}),"."]}),(0,s.jsx)("video",{autoPlay:!0,muted:!0,loop:!0,playsInline:!0,className:"w-100 br1 shadow-1",style:{marginBottom:-4},children:(0,s.jsx)("source",{src:"".concat("https://static.observablehq.com","/assets/guides/quickguides-mystery1.mov"),type:"video/mp4"})})]}),start:14,end:23},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["The case report says that"," ",(0,s.jsx)("em",{children:'the first witness lives at the last house on "Northwestern Dr"'}),"."]}),(0,s.jsxs)("p",{children:["How do we find that person? We can narrow down the people living on a particular street in the person table by filtering the"," ",(0,s.jsx)("code",{children:"address_street_name"})," field to"," ",(0,s.jsx)("code",{children:"Northwestern Dr."})]}),(0,s.jsxs)("p",{children:["Sorting the table by ",(0,s.jsx)("code",{children:"address_number"})," in descending order means that the person in the last house is the one at the top of our table. We can also remove columns we don't need and only keep the columns ",(0,s.jsx)("code",{children:"name"}),","," ",(0,s.jsx)("code",{children:"address_number"}),", ",(0,s.jsx)("code",{children:"address_street_name"}),", and limit to a single row since we're not interested in the other people living on that street."]}),(0,s.jsx)("video",{autoPlay:!0,muted:!0,loop:!0,playsInline:!0,className:"w-100 br1 shadow-1",style:{marginBottom:-4},children:(0,s.jsx)("source",{src:"".concat("https://static.observablehq.com","/assets/guides/quickguides-mystery2.mov"),type:"video/mp4"})})]}),start:25,end:39},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"From here we'll just explore the database a bit further, rather than following the clues. We'll start by creating the same table view we just did by using SQL instead. In fact, Observable can do this for us."}),(0,s.jsxs)("p",{children:["Click the ",(0,s.jsx)(a.JO,{icon:x.ZP})," add cell button below the table, and then pick ",(0,s.jsx)(a.JO,{icon:d.v,className:"mr1"}),(0,s.jsx)("strong",{children:"Convert to SQL"})," to convert the data table cell into a SQL cell."]}),(0,s.jsx)("p",{children:"This shows the exact same data as before, but now you can edit the SQL code that is used to create the query."})]}),start:41,end:43},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["It might be fun to see how many people live on the different streets. In SQL, we can create an aggregation by the",(0,s.jsx)("code",{children:"address_street_name"})," field in the person table we just looked at, and then sort by that field to see the streets with the most people first."]}),(0,s.jsx)("p",{children:"Edit the SQL in the cell to look like this:"}),(0,s.jsx)(a.SU,{children:"SELECT address_street_name\n     , count(*) as count\n  FROM person\nGROUP BY address_street_name\nORDER BY count DESC"})]}),start:45,end:46},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["The dataset also contains a pair of tables about a fitness studio called ",(0,s.jsx)("em",{children:"Get Fit Now"}),". We can find out who the most active members of it are."]}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("em",{children:"get_fit_now_check_in"})," table contains entries for each person's check-ins, using the membership_id column. To find out who they are, we can look them up in the"," ",(0,s.jsx)("code",{children:"get_fit_now_member"})," table, where we can find their"," ",(0,s.jsx)("em",{children:"name"})," in the name column and their membership ID in the id field."]}),(0,s.jsx)("p",{children:"Create new data table cells to look over these two tables!"})]}),start:48,end:54},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["To find out how often each person has checked in, we can create a similar query as with the street populations before, but that will only give us their membership IDs. To see their names, we need to"," ",(0,s.jsx)("em",{children:"join"})," the two tables."]}),(0,s.jsxs)("p",{children:["Create a new SQL cell, pick the ",(0,s.jsx)("code",{children:"db"})," database as the data source, and enter the following query:"]}),(0,s.jsx)(a.SU,{children:"SELECT m.name\n     , COUNT(*) as count\n  FROM get_fit_now_member m\n    JOIN get_fit_now_check_in c\n      ON m.id = c.membership_id\nGROUP BY m.name\nORDER BY count DESC"}),(0,s.jsx)("p",{children:"This will show you the list of members, sorted by how often they have checked in."}),(0,s.jsx)("p",{children:"The details of the query are beyond the scope of this quick guide, but the basic idea is simple: perform a join of the check-in table to the membership table using the membership ID, then group by the person name and count how often each appears, and finally sort by the count in descending order."})]}),start:56,end:59},{content:e=>{let{dispatch:t,currentUser:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["We only touched on the SQL murder mystery here, but you can either solve it yourself or read"," ",(0,s.jsx)(a.rU,{href:"https://observablehq.com/@observablehq/sql-mystery-game-data-table-tutorial",children:"a walkthrough of it using the data table cell"}),"."]}),(0,s.jsx)(l.KM,{icon:u.Z,title:"Save to your notebooks","aria-label":"Save to your notebooks",text:"Save to your notebooks",onClick:()=>{t({type:"forkRequested",source:"guide",trigger:"click"})}}),(0,s.jsxs)("p",{children:["Next,"," ",(0,s.jsx)(a.rU,{href:"/guide/athletes",children:"explore data about Olympic athletes using bar charts and histograms"})," ","or check out one of these other resources:"," "]}),(0,s.jsxs)("ul",{className:"pl3",children:[(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/electricity",children:"Analyze the relationship between temperature and electricity use in two citites"})}),(0,s.jsx)("li",{children:(0,s.jsxs)(a.rU,{href:"/@observablehq/getting-started",children:["Check out our ",(0,s.jsx)("em",{children:"Getting Started"})," notebook"]})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:n?"/@".concat(n.login):"/",children:"Go back to your home page"})})]})]})},start:61,end:63}]},{type:"athletes",title:"Create interactive charts from simple tabular data",image:"".concat(b,"/assets/guides/charts.svg"),tags:["histogram","inputs"],steps:[{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:(0,s.jsxs)("em",{children:["This guide builds on"," ",(0,s.jsx)(a.rU,{href:"/guide/first-steps",children:"First steps with Observable"}),"."]})}),(0,s.jsx)("p",{children:"Let\u2019s explore some data! You're probably familiar with the tabular view of data, like the one you see on the left. Each entry (or in our case, athlete) is represented by a row, and each column contains a different piece of data about them."}),(0,s.jsxs)("p",{children:["To see what data in Observable looks like, create a new JavaScript cell by clicking a ",(0,s.jsx)(a.JO,{icon:x.ZP})," button on the left and selecting ",(0,s.jsx)("b",{children:"JavaScript"}),". Then type the variable name"," ",(0,s.jsx)("code",{children:"olympians"})," into your new cell. This is one of the"," ",(0,s.jsx)(a.rU,{href:"/@observablehq/sample-datasets?collection=@observablehq/getting-data-in-and",children:"sample datasets from our standard library"}),"."]}),(0,s.jsx)(a.SU,{children:"olympians"}),(0,s.jsxs)("p",{children:["Run the cell by clicking ",(0,s.jsx)(a.JO,{icon:p.Z,text:"Run cell"})," or pressing ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"}),". You will see the word"," ",(0,s.jsx)("code",{children:"Array"})," with a triangle \u25b6 next to it. An array is a group of objects that usually share the same structure. Click the triangle to expand the array into its objects, then click the triangle next to an object to see its properties."]}),(0,s.jsx)("p",{children:"We can think of each object in this array as one row in our table. Each named field within each object is a property of that object, which would appear in its respective column in a table."})]}),start:39,end:41},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Which countries do the athletes in our dataset come from? Let\u2019s make a chart using a built-in code snippet, which conveniently uses this data."}),(0,s.jsxs)("p",{children:["Click a ",(0,s.jsx)(a.JO,{icon:x.ZP})," button again and type \u201cTop\u201d to find the ",(0,s.jsx)("b",{children:"Top 10 bar chart"}),", then click it or press"," ",(0,s.jsx)(a.R8,{words:!0,children:"Enter"}),". This inserts code using"," ",(0,s.jsx)(a.rU,{href:"/plot",children:"Observable\u2019s Plot library"})," into the notebook. Run it by pressing ",(0,s.jsx)(a.R8,{words:!0,children:"Shift-Enter"})," or clicking the ",(0,s.jsx)(a.JO,{icon:p.Z})," button."]}),(0,s.jsx)("p",{children:"We can now see the countries sending the most athletes to these particular Olympic Games: USA, Brazil, Germany, Australia, etc."})]}),start:43,end:45},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"How much do our athletes weigh? It might not be polite to ask them, but we can find out from our dataset."}),(0,s.jsxs)("p",{children:["Click the ",(0,s.jsx)(a.JO,{icon:x.ZP})," button again and find the"," ",(0,s.jsx)("em",{children:"Histogram"})," chart, either by typing the word or scrolling. Insert it into the notebook and run the cell as before. It also uses the ",(0,s.jsx)("code",{children:"olympians"})," dataset by default."]}),(0,s.jsxs)("p",{children:["A histogram shows you the distribution of weights (in kilograms). The horizontal axis is divided into weight ranges called"," ",(0,s.jsx)(a.rU,{href:"/@observablehq/plot-bin?collection=@observablehq/plot",children:"bins"}),". The height of each bar shows how many athletes in our dataset are in that weight range."]}),(0,s.jsx)("p",{children:"What other questions might we ask about this data?"})]}),start:47,end:49},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"An obvious follow-up question is how weight differs between the sexes. We can use the bars\u2019 fill color to break them up."}),(0,s.jsxs)("p",{children:["To do this, modify the second argument to ",(0,s.jsx)("code",{children:"Plot.binX"})," ","to read like this:"]}),(0,s.jsx)(a.SU,{children:'{x: "weight", fill: "sex"}'}),(0,s.jsxs)("p",{children:["To make sure we don't mix up which color represents which sex here, we'll need to add a color legend. Replace the closing square bracket ",(0,s.jsx)("code",{children:"]"})," of the marks array with the following piece of code:"]}),(0,s.jsx)(a.SU,{children:"],\ncolor: {\n    legend: true\n}"}),(0,s.jsx)("p",{children:"This includes the closing bracket as well as the crucial comma to keep the code syntactically correct. As before, don't forget to run the cell after you've modified it."})]}),start:51,end:53},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"This histogram shows us all data for all the athletes in our dataset, but surely there are differences between the disciplines. Let\u2019s create a way to pick the sport we want to see."}),(0,s.jsxs)("p",{children:["We have prepared a new variable for you called ",(0,s.jsx)("code",{children:"sports"}),". You can use it to create a drop-down control by clicking a"," ",(0,s.jsx)(a.JO,{icon:x.ZP})," button above the chart and typing \u201cselect\u201d to find and insert a select input."]}),(0,s.jsxs)("p",{children:["Change the default name of the variable, ",(0,s.jsx)("code",{children:"select"})," to"," ",(0,s.jsx)("code",{children:"sport"})," and replace the array of options",(0,s.jsx)("code",{children:'["A", "B"]'})," (including the square brackets) with the ",(0,s.jsx)("code",{children:"sports"})," variable. Finally, change the label to say \u201cSport:\u201d."]}),(0,s.jsx)("p",{children:"The completed cell should look like this:"}),(0,s.jsx)(a.SU,{children:'viewof sport = Inputs.select(sports,\n                    {label: "Sport:"})'}),(0,s.jsxs)("p",{children:["You can now select a sport, but the chart won't respond yet. To change that, replace the ",(0,s.jsx)("code",{children:"olympians"})," variable in the call to ",(0,s.jsx)("code",{children:"Plot.rectY"})," with ",(0,s.jsx)("code",{children:"sport"}),". It should look like this:"]}),(0,s.jsx)(a.SU,{children:'Plot.rectY(sport,\n        Plot.binX({y: "count"},\n          {x: "weight", fill: "sex"})),'}),(0,s.jsx)("p",{children:"Switch between different sports to see the shape of the distribution change!"})]}),start:58,end:64},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"Observable's Plot library tries to help us by re-scaling the chart when we switch the sport, but for easier comparison we want to keep the domain of the horizontal axis the same for all sports."}),(0,s.jsxs)("p",{children:["To do that, add the following after the closing curly brace of the"," ",(0,s.jsx)("code",{children:"color: "})," item and, importantly, a comma:"]}),(0,s.jsx)(a.SU,{children:"x: {\n    domain: [0, 200]\n}"}),(0,s.jsx)("p",{children:"You can now see the absolute difference in weight distribution more clearly, for example between weightlifting and gymnastics."})]}),start:66,end:68},{content:e=>{let{dispatch:t,currentUser:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["This concludes our first exploration of data using"," ",(0,s.jsx)(a.rU,{href:"/plot",children:"Observable Plot"}),"."]}),(0,s.jsx)(l.KM,{icon:u.Z,title:"Save to your notebooks","aria-label":"Save to your notebooks",text:"Save to your notebooks",onClick:()=>{t({type:"forkRequested",source:"guide",trigger:"click"})}}),(0,s.jsxs)("p",{children:["Next,"," ",(0,s.jsx)(a.rU,{href:"/guide/electricity",children:"analyze the relationship between temperature and electricity use in two citites"})," ","or:"]}),(0,s.jsxs)("ul",{className:"pl3",children:[(0,s.jsx)("li",{children:(0,s.jsxs)(a.rU,{href:"/@observablehq/getting-started",children:["Check out our ",(0,s.jsx)("em",{children:"Getting Started"})," notebook"]})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:n?"/@".concat(n.login):"/",children:"Go back to your home page"})})]})]})},start:70,end:72}]},{type:"electricity",image:"".concat(b,"/assets/guides/timeseries.svg"),title:"Visualize time series data with smoothed line charts",tags:["scatterplot","csv"],steps:[{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:(0,s.jsxs)("em",{children:["This guide builds on"," ",(0,s.jsx)(a.rU,{href:"/guide/first-steps",children:"First steps with Observable"}),"."]})}),(0,s.jsx)("p",{children:"In this guide, we\u2019ll look at how electricity use varied with temperature over the year 2021 in two American cities: Los Angeles, CA and Seattle, WA."}),(0,s.jsxs)("p",{children:["We\u2019ve prepared the data for you and"," ",(0,s.jsx)(a.rU,{href:"/@observablehq/introduction-to-data#files",children:"attached it to this notebook"})," ","in CSV (comma-separated values) files. The"," ",(0,s.jsx)("code",{children:"power_vs_temperature"})," variable contains the combined data. Click the triangle \u25b6 next to the word"," ",(0,s.jsx)("code",{children:"Array"})," to inspect the temperature and electricity use values."]}),(0,s.jsxs)("p",{children:["Click on a ",(0,s.jsx)(a.JO,{icon:x.ZP})," button on the left and add a"," ",(0,s.jsx)("b",{children:"Multi-series line chart"})," by entering part of its name and then clicking on it or pressing ",(0,s.jsx)(a.R8,{words:!0,children:"Enter"}),". Rename the data variable from ",(0,s.jsx)("code",{children:"industries"})," to"," ",(0,s.jsx)("code",{children:"power_vs_temperature"})," and replace the y and z field names with ",(0,s.jsx)("code",{children:'y: "temperature"'})," and"," ",(0,s.jsx)("code",{children:'z: "city"'}),", respectively."]}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("code",{children:"Plot.lineY"})," function call should now look like this:"]}),(0,s.jsx)(a.SU,{children:'Plot.lineY(power_vs_temperature,\n     {x: "date", y: "temperature",\n          z: "city"})'}),(0,s.jsx)("p",{children:"Once you run the cell, you\u2019ll see a line chart with one line for each city."})]}),start:116,end:118},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"We can improve this chart by coloring the lines and adding a legend."}),(0,s.jsxs)("p",{children:["First, change the ",(0,s.jsx)("code",{children:'z: "city"'})," assignment in the"," ",(0,s.jsx)("code",{children:"Plot.lineY"})," call to ",(0,s.jsx)("code",{children:'stroke: "city"'}),". This assigns different colors to the two cities. But which colors, and which one is which?"]}),(0,s.jsxs)("p",{children:["We want to specify the order of the colors and add a color legend. To do that, replace the closing square bracket ",(0,s.jsx)("code",{children:"]"})," with this code:"]}),(0,s.jsx)(a.SU,{children:'],\n  color: {\n    domain: ["Seattle", "Los Angeles"],\n    legend: true\n  }'}),(0,s.jsx)("p",{children:"Now we can see which city is which. Unsurprisingly, temperatures are generally higher in L.A. than Seattle, but summer temperatures weren\u2019t all that different in 2021."})]}),start:120,end:121},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"How does electricity use differ between these two cities? We can use the same chart, but use a variable to switch the measure we are looking at."}),(0,s.jsxs)("p",{children:["Click a ",(0,s.jsx)(a.JO,{icon:x.ZP})," button on the left and insert a"," ",(0,s.jsx)("b",{children:"Select"})," input into the notebook. Replace the name of the variable with ",(0,s.jsx)("code",{children:"measure"}),", the list of options with"," ",(0,s.jsx)("code",{children:'["temperature", "power"]'}),", and change the label to ",(0,s.jsx)("code",{children:"Measure"}),". It should look like this:"]}),(0,s.jsx)(a.SU,{children:'viewof measure =\n    Inputs.select(\n        ["temperature", "power"],\n            {label: "Measure"})'}),(0,s.jsxs)("p",{children:["In the cell containing the code for the chart, change the definition for the y axis from"," ",(0,s.jsx)("code",{children:'y: "temperature"'})," to ",(0,s.jsx)("code",{children:"y: measure"})," ","(note that you have to remove the quotation marks)."]}),(0,s.jsx)("p",{children:"Now when you change the measure in the dropdown, the chart will respond."}),(0,s.jsxs)("p",{children:["Adding some extra margin to the chart gives the axis labels more room. Add a comma after the closing curly brace ",(0,s.jsx)("code",{children:"}"})," ","of the ",(0,s.jsx)("code",{children:"color:"})," section, then add:"]}),(0,s.jsx)(a.SU,{children:"marginLeft: 50"})]}),start:123,end:127},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Both temperature and electricity use can vary quite a bit from day to day. Let\u2019s smooth them out to make it easier to see trends and averages. We\u2019ll use a"," ",(0,s.jsx)(a.rU,{href:"/@observablehq/plot-window",children:"window function built into Plot"})," ","to do this, but we want to be able to control the amount of smoothing."]}),(0,s.jsxs)("p",{children:["Insert a ",(0,s.jsx)("b",{children:"Range"})," input, rename the variable to ",(0,s.jsx)("code",{children:"k"}),", change the range of values to ",(0,s.jsx)("code",{children:"[1, 20]"}),", and the label to ",(0,s.jsx)("code",{children:'"Smoothing"'}),"."]}),(0,s.jsx)(a.SU,{children:'viewof k = Inputs.range([1, 20],\n        {label: "Smoothing", step: 1})'}),(0,s.jsxs)("p",{children:["To make use of the smoothing amount ",(0,s.jsx)("code",{children:"k"}),", replace this part inside the ",(0,s.jsx)("code",{children:"Plot.lineY"})," function call"]}),(0,s.jsx)(a.SU,{children:'{x: "date", y: measure,\n            stroke: "city"}'}),"with the following:",(0,s.jsx)(a.SU,{children:'Plot.windowY({x: "date", y: measure,\n  k: k, reduce: "mean", stroke: "city"})'}),(0,s.jsx)("p",{children:"Now when you move the slider, the amount of smoothing in the chart will change."})]}),start:129,end:132},{content:()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Line charts let us see temperature and electricity use separately, but how do they interact? A"," ",(0,s.jsx)(a.rU,{href:"/@observablehq/plot-dot",children:"scatterplot"})," will show us that."]}),(0,s.jsxs)("p",{children:["Insert a ",(0,s.jsx)("b",{children:"Scatterplot"})," snippet. Rename the default"," ",(0,s.jsx)("code",{children:"cars"})," variable to ",(0,s.jsx)("code",{children:"power_vs_temperature"}),", change the x mapping to ",(0,s.jsx)("code",{children:'"temperature"'})," and y to ",(0,s.jsx)("code",{children:'"power"'}),", and add a"," ",(0,s.jsx)("code",{children:'fill: "city"'})," item. The"," ",(0,s.jsx)("code",{children:"Plot.dot"})," function call should look like this:"]}),(0,s.jsx)(a.SU,{children:'Plot.dot(power_vs_temperature,\n  {x: "temperature", y: "power",\n    fill: "city"})'}),(0,s.jsx)("p",{children:"We also need to change colors again and add a color legend. We'll also add some space on the left again. Add the following after the closing square bracket, and don\u2019t forget the comma to separate them as well (you can also copy it from the line chart):"}),(0,s.jsx)(a.SU,{children:'color: {\n  domain: ["Seattle", "Los Angeles"],\n  legend: true\n},\nmarginLeft: 50'}),(0,s.jsx)("p",{children:"What does this chart tell you about the differences in climate and people's behavior between the two cities?"})]}),start:134,end:139},{content:e=>{let{dispatch:t,currentUser:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:"This concludes our introduction to creating line charts, as well as using advanced features such as windowing functions and variables to select data series."}),(0,s.jsx)(l.KM,{icon:u.Z,title:"Save to your notebooks","aria-label":"Save to your notebooks",text:"Save to your notebooks",onClick:()=>{t({type:"forkRequested",source:"guide",trigger:"click"})}}),(0,s.jsx)("p",{children:"Here are some more guides and other resources to check out:"}),(0,s.jsxs)("ul",{className:"pl3",children:[(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:"/guide/athletes",children:"Explore data about Olympic athletes using bar charts and histograms"})}),(0,s.jsx)("li",{children:(0,s.jsxs)(a.rU,{href:"/@observablehq/getting-started",children:["Check out our ",(0,s.jsx)("em",{children:"Getting Started"})," notebook"]})}),(0,s.jsx)("li",{children:(0,s.jsx)(a.rU,{href:n?"/@".concat(n.login):"/",children:"Go back to your home page"})})]})]})},start:141,end:143}]}];var y=(0,g.$j)((e=>{let{notebook:t,page:n,currentUser:s}=e;return{notebook:t,page:n,currentUser:s}}),(e=>({dispatch:e})))((e=>{let{notebook:t,page:{guide:n},dispatch:i,currentUser:a}=e;const{saveVersion:d}=t,u=f.find((e=>e.type===n));if(!u)throw new Error("guide not found: ".concat(n));const p=function(e,t){const{saveVersion:n}=t,s=e.steps.findIndex((e=>e.start<=n&&n<=e.end)),i=e.steps[s];if(!i)throw new Error("guide step not found: ".concat(n));return{stepNumber:s+1,step:i,previousStep:e.steps[s-1],nextStep:e.steps[s+1]}}(u,t),{stepNumber:x,step:g,previousStep:b,nextStep:y}=p,w=function(e){const t=(0,o.useRef)();return(0,o.useEffect)((()=>{t.current=e})),t.current}(x),v=(0,m.GS)("(max-width: 960px)",!1);return(0,o.useEffect)((()=>{(0,j.MR)((0,j.K)({type:"guide:view:stepChanged",data:{stepCurrent:x,stepPrevious:w},eventVersion:1,guide:u,notebook:t,currentUser:a}))}),[x]),(0,s.jsxs)("div",{className:"overflow-y-auto w-100",children:[(0,s.jsxs)("div",{className:"lh-title z-1 near-black pa3 bb bg-light-blue white b--light-silver br3 br--top flex items-center justify-between top-0 sticky",children:[(0,s.jsx)("div",{className:"f5 fw6",children:u.title}),(0,s.jsxs)("div",{className:r()("f7 flex-shrink-0",{pr4:v}),children:[x," of ",u.steps.length]})]}),(0,s.jsx)("div",{className:"pa3 pt0 near-black lh-copy",children:(0,s.jsx)(g.content,{dispatch:i,currentUser:a})}),(0,s.jsxs)("div",{className:r()("pa3 flex items-center","justify-".concat(y?"between":"end")),children:[y&&(0,s.jsx)(l.kq,{text:d===g.start?"Show me":"Reset",onClick:()=>{d===g.start?((0,j.MR)((0,j.K)({type:"guide:view:showStep",data:{stepCurrent:x},guide:u,eventVersion:1,notebook:t,currentUser:a})),i({type:"loadVersion",version:g.end})):((0,j.MR)((0,j.K)({type:"guide:view:resetStep",data:{stepCurrent:x},guide:u,eventVersion:1,notebook:t,currentUser:a})),i({type:"loadVersion",version:g.start}))}}),(0,s.jsxs)("div",{className:"flex items-center",children:[(0,s.jsx)(l.kq,{icon:c.Z,disabled:!b,title:"Previous step","aria-label":"Previous step",text:"",onClick:()=>{b&&((0,j.MR)((0,j.K)({type:"guide:view:previousStep",data:{stepCurrent:x,stepTarget:x-1},guide:u,eventVersion:1,notebook:t,currentUser:a})),i({type:"loadVersion",version:b.start}))}}),(0,s.jsx)(l.KM,{icon:h.Z,iconPosition:"right",disabled:!y,title:"Next step","aria-label":"Next step",text:"Next",onClick:()=>{y&&((0,j.MR)((0,j.K)({type:"guide:view:nextStep",data:{stepCurrent:x,stepTarget:x+1},guide:u,eventVersion:1,notebook:t,currentUser:a})),i({type:"loadVersion",version:y.start}))}})]})]})]})}))},21918:function(e,t,n){n.d(t,{BQ:function(){return p},JO:function(){return h.W},R8:function(){return d},SU:function(){return u},rU:function(){return x}});var s=n(85893),i=n(60357),r=n.n(i),o=n(20637),a=n(64804),l=n(33494),c=n(40178),h=n(8052);function d(e){let{children:t,words:n}=e;const i=(0,c._)(t),r=(0,c.Z)(t);return(0,s.jsxs)("b",{title:(0,c._)(t),children:[n&&i!==r?"".concat(i," "):null,r]})}function u(e){let{children:t}=e;const n=o.Z.highlight(t,{language:"javascript"});return(0,s.jsxs)("div",{className:"jsx-dbc3573e1a7582f5 snippet relative",children:[(0,s.jsx)("pre",{className:"jsx-dbc3573e1a7582f5 hljs f7 br2 pa2 overflow-x-auto bg-near-white",children:(0,s.jsx)("code",{dangerouslySetInnerHTML:{__html:n.value},className:"jsx-dbc3573e1a7582f5"})}),(0,s.jsx)("button",{title:"Copy code",onClick:()=>navigator.clipboard.writeText(t),className:"jsx-dbc3573e1a7582f5 button absolute top-0 right-0 bg-near-white hover-bg-white pointer ba b--near-white br2 flex pa1 ma1",children:(0,s.jsx)(a.Z,{})}),(0,s.jsx)(r(),{id:"dbc3573e1a7582f5",children:"pre.jsx-dbc3573e1a7582f5{overflow:auto;max-height:400px}button.jsx-dbc3573e1a7582f5{visibility:hidden}.snippet.jsx-dbc3573e1a7582f5:hover button.jsx-dbc3573e1a7582f5{visibility:inherit}button.jsx-dbc3573e1a7582f5:active{background:var(--silver)}"})]})}function p(e){let{article:t,dispatch:n,children:i}=e;return(0,s.jsx)("a",{role:"link",tabIndex:0,className:"blue pointer underline-hover",onKeyPress:l.z_,onClick:()=>n({type:"openHelpArticle",article:t}),children:i})}function x(e){let{href:t,children:n}=e;return(0,s.jsx)("a",{target:"_blank",className:"blue",rel:"noopener noreferrer",href:t,children:n})}}}]);